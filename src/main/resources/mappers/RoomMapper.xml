<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dgit.mapper.RoomMapper">

	<insert id="insertroom">
		insert into room(rno,roomname,price,people,content)
		values(#{rno},#{roomname},#{price},#{people},#{content})
	</insert>

	<insert id="addAttach">
		insert into file(fullname,rno)
		values(#{fullName},#{rno})
	</insert>

	<select id="getAttach" resultType="String">
		select fullname from file
		where rno = #{rno}
	</select>

	<select id="selectAll" resultType="RoomVO">
		select * from room
	</select>

	<select id="nextrno" resultType="Int">
		select if(max(rno) is
		null,1,max(rno)+1) from room
	</select>

	<delete id="deleteroom">
		delete from room where rno = #{rno}
	</delete>

	<select id="selectfromrno" resultType="RoomVO">
		select * from room where
		rno = #{rno}
	</select>

	<update id="updateroom">
		update room set
		roomname = #{roomname}, price =
		#{price}, people = #{people}, content
		=
		#{content}
		where rno = #{rno}
	</update>

	<delete id="removeAttach">
		delete from file where rno = #{rno}
	</delete>

	<select id="selectEND" resultType="Booking_Room">
		select * from bookroom where
		uid = #{uid} order by state , bno desc;
	</select>
	
	
	
<!-- 	
	<select id="selectEND1" resultType="Booking_Room">
		select * from bookroom where
		uid = #{uid} order by bno desc limit #{page},5
	</select>
	<select id="selectEND2" resultType="Booking_Room">
		select * from bookroom
		where uid=#{uid} 
		order
		by bno desc limit #{pageStart},#{perPageNum}
	</select>
	<select id="selectEND3" resultType="int">
		select count(bno) from
		bookroom where uid =#{uid}
	</select> 
-->




	<select id="selectADMIN" resultType="Booking_Room">
		select * from bookroom order
		by startdate desc
		<!-- by bno desc -->
	</select>

	<select id="selectADMIN_update" resultType="Booking_Room">
		select * from
		bookroom where bno=#{bno}
	</select>

	<update id="updatebookroom">
		update bookroom set
		person=#{person},startdate=#{startdate},enddate=#{enddate},state=#{state}
		where bno = #{bno}
	</update>

	<select id="selectMYPAGE" resultType="Booking_Room">
		select * from bookroom
		where state = '예약' order by bno desc
	</select>

	<!-- 페이징처리 -->
	<select id="listPage" resultType="Booking_Room">
		select * from bookroom where
		bno>0 order by bno desc limit #{page},5
	</select>
	<select id="listCriteria" resultType="Booking_Room">
		select * from bookroom
		where bno>0
		order
		<!-- by bno desc limit #{pageStart},#{perPageNum} -->
		by startdate desc limit #{pageStart},#{perPageNum}
	</select>
	<select id="countPaging" resultType="int">
		select count(bno) from
		bookroom where bno > 0
	</select>

	<!-- 해당방에 들어갈수있는 사람수 -->
	<select id="selectpeople" resultType="int">
		select people from room where rno = #{rno}
	</select>
	<select id="selectsumperson" resultType="int">
		select if(sum(person) is null,0,sum(person)) from booking where rno = #{rno} and state='예약' and (startdate=#{startdate} or enddate=#{startdate})
	</select>
	
	<!-- 찾기 -->
	
	<select id="listSearch" resultType="Booking_Room">
		select * from bookroom  <include refid="search"></include>  order by startdate desc limit #{pageStart},#{perPageNum} 
	</select>
	
	<select id="listSearchCount" resultType="int">
		select count(bno) from bookroom  <include refid="search"></include>
	</select>
	
	
	<sql id="search">
		<if test="searchType == 'all'.toString()">
			
		</if>
		<if test="searchType == 'part'.toString()">
			where state='예약'
		</if>
		<if test="searchType == 'cancel'.toString()">
			where state='예약취소'
		</if>
		<if test="searchType == 'done'.toString()">
			where state='예약종료'
		</if>
	</sql>
	
	
	
</mapper>